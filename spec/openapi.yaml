openapi: 3.0.1
info:
  title: BioMad API v1
  description: Web API documentation for BioMad application.
  contact:
    name: Artyom Lukyanov
    email: artglz63@gmail.com
  license:
    name: MIT
  version: v1
paths:
  /api/v1/Auth/logIn:
    post:
      tags:
        - Auth
      summary: Logs in user with given credentials
      parameters:
        - name: culture
          in: header
          description: Header represents current culture
          schema:
            type: string
            description: Header represents current culture
            nullable: true
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LogInWithCredentialsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LogInWithCredentialsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LogInWithCredentialsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LogInWithCredentialsModel'
      responses:
        '200':
          description: If authentication is succeeded
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
        '404':
          description: If credentials are invalid
      security:
        - bearer: []
  /api/v1/Auth/signUp:
    post:
      tags:
        - Auth
      summary: Signs up new user
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SignUpModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SignUpModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SignUpModel'
      responses:
        '200':
          description: If sign up is successfully completed
        '400':
          description: If something else went wrong
        '409':
          description: If user with given email already exists
      security:
        - bearer: []
  /api/v1/Auth/refreshToken:
    post:
      tags:
        - Auth
      summary: "Authenticates user with model contains refresh token;\r\nRevokes given refresh token and provides with new"
      parameters:
        - name: culture
          in: header
          description: Header represents current culture
          schema:
            type: string
            description: Header represents current culture
            nullable: true
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RefreshTokenAuthenticationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenAuthenticationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenAuthenticationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RefreshTokenAuthenticationModel'
      responses:
        '200':
          description: If everything went ok
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
        '400':
          description: If anything went wrong
      security:
        - bearer: []
  '/api/v1/Auth/logIn/{type}':
    post:
      tags:
        - Auth
      summary: Logs in user by its social account
      parameters:
        - name: type
          in: path
          description: Name of social provider
          required: true
          schema:
            type: string
            description: Name of social provider
            nullable: true
        - name: culture
          in: header
          description: Header represents current culture
          schema:
            type: string
            description: Header represents current culture
            nullable: true
      requestBody:
        description: Model contains token of social provider identity
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TokenModel'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenModel'
          text/json:
            schema:
              $ref: '#/components/schemas/TokenModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TokenModel'
        required: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResult'
        '400':
          description: If anything went BAD
        '404':
          description: If social provider is invalid
      security:
        - bearer: []
  '/api/v1/Auth/signUp/{type}/identity':
    post:
      tags:
        - Auth
      summary: Gets social provider identity to provide data for auth flow
      parameters:
        - name: type
          in: path
          description: Name of social provider
          required: true
          schema:
            type: string
            description: Name of social provider
            nullable: true
      requestBody:
        description: Model contains token of social account identity
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TokenModel'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenModel'
          text/json:
            schema:
              $ref: '#/components/schemas/TokenModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TokenModel'
        required: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SocialAuthenticationIdentity'
            application/json:
              schema:
                $ref: '#/components/schemas/SocialAuthenticationIdentity'
            text/json:
              schema:
                $ref: '#/components/schemas/SocialAuthenticationIdentity'
        '400':
          description: If something else went wrong
        '404':
          description: If type is invalids
      security:
        - bearer: []
  '/api/v1/Auth/signUp/{type}':
    post:
      tags:
        - Auth
      summary: Signs up new user with connected social account
      parameters:
        - name: type
          in: path
          description: Name of social provider
          required: true
          schema:
            type: string
            description: Name of social provider
            nullable: true
      requestBody:
        description: Data for User's sign up
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SignUpWithSocialAccountModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpWithSocialAccountModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SignUpWithSocialAccountModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SignUpWithSocialAccountModel'
        required: true
      responses:
        '200':
          description: If sign up is successfully completed
        '400':
          description: If something else went wrong
        '409':
          description: If user with given email already exists
      security:
        - bearer: []
  '/api/v1/Biomarker/{id}/history':
    get:
      tags:
        - Biomarker
      summary: Gets history of member's biomarker values for given Id of biomarker
      parameters:
        - name: id
          in: path
          description: Id of biomarker history to get
          required: true
          schema:
            type: integer
            description: Id of biomarker history to get
            format: int32
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            default: desc
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBiomarker'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBiomarker'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBiomarker'
      security:
        - bearer: []
  /api/v1/Biomarker/type:
    get:
      tags:
        - Biomarker
      summary: Gets types of biomarkers
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiomarkerType'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiomarkerType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiomarkerType'
      security:
        - bearer: []
  '/api/v1/Biomarker/type/{id}':
    get:
      tags:
        - Biomarker
      summary: Gets type of biomarker of given id
      parameters:
        - name: id
          in: path
          description: Id of type to get
          required: true
          schema:
            type: integer
            description: Id of type to get
            format: int32
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiomarkerType'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiomarkerType'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BiomarkerType'
        '404':
          description: If no resource was found
      security:
        - bearer: []
  /api/v1/Biomarker/search:
    post:
      tags:
        - Biomarker
      summary: Searches biomarkers by query
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Query to search(by name)
        content:
          application/json-patch+json:
            schema:
              type: string
              description: Query to search(by name)
          application/json:
            schema:
              type: string
              description: Query to search(by name)
          text/json:
            schema:
              type: string
              description: Query to search(by name)
          application/*+json:
            schema:
              type: string
              description: Query to search(by name)
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
      security:
        - bearer: []
  /api/v1/Biomarker:
    get:
      tags:
        - Biomarker
      summary: Gets paged resources of type
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
      security:
        - bearer: []
    post:
      tags:
        - Biomarker
      summary: Gets paged resources of type of given ids
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Ids of resources to get
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
      security:
        - bearer: []
  '/api/v1/Biomarker/{id}':
    get:
      tags:
        - Biomarker
      summary: Gets resource of type of given id
      parameters:
        - name: id
          in: path
          description: Number of page to get(starts from 1)
          required: true
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Biomarker'
            application/json:
              schema:
                $ref: '#/components/schemas/Biomarker'
            text/json:
              schema:
                $ref: '#/components/schemas/Biomarker'
        '404':
          description: If no resource was found
      security:
        - bearer: []
  '/api/v1/Category/{id}/history':
    get:
      tags:
        - Category
      summary: Gets state history of category with given id
      parameters:
        - name: id
          in: path
          description: Category of which history to get
          required: true
          schema:
            type: integer
            description: Category of which history to get
            format: int32
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            default: desc
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberCategoryState'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberCategoryState'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberCategoryState'
      security:
        - bearer: []
  /api/v1/Category/history:
    get:
      tags:
        - Category
      summary: Gets state history of categories
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            default: desc
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberCategoryState'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberCategoryState'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberCategoryState'
      security:
        - bearer: []
  /api/v1/Category/search:
    post:
      tags:
        - Category
      summary: Searches categories by query
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Query to search(by name)
        content:
          application/json-patch+json:
            schema:
              type: string
              description: Query to search(by name)
          application/json:
            schema:
              type: string
              description: Query to search(by name)
          text/json:
            schema:
              type: string
              description: Query to search(by name)
          application/*+json:
            schema:
              type: string
              description: Query to search(by name)
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      security:
        - bearer: []
  /api/v1/Category:
    get:
      tags:
        - Category
      summary: Gets paged resources of type
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      security:
        - bearer: []
    post:
      tags:
        - Category
      summary: Gets paged resources of type of given ids
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Ids of resources to get
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      security:
        - bearer: []
  '/api/v1/Category/{id}':
    get:
      tags:
        - Category
      summary: Gets resource of type of given id
      parameters:
        - name: id
          in: path
          description: Number of page to get(starts from 1)
          required: true
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Category'
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            text/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: If no resource was found
      security:
        - bearer: []
  /api/v1/City/search:
    post:
      tags:
        - City
      summary: Searches cities by query
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Query to search(by name)
        content:
          application/json-patch+json:
            schema:
              type: string
              description: Query to search(by name)
          application/json:
            schema:
              type: string
              description: Query to search(by name)
          text/json:
            schema:
              type: string
              description: Query to search(by name)
          application/*+json:
            schema:
              type: string
              description: Query to search(by name)
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
      security:
        - bearer: []
  /api/v1/City:
    get:
      tags:
        - City
      summary: Gets paged resources of type
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
      security:
        - bearer: []
    post:
      tags:
        - City
      summary: Gets paged resources of type of given ids
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Ids of resources to get
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
      security:
        - bearer: []
  '/api/v1/City/{id}':
    get:
      tags:
        - City
      summary: Gets resource of type of given id
      parameters:
        - name: id
          in: path
          description: Number of page to get(starts from 1)
          required: true
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/City'
            application/json:
              schema:
                $ref: '#/components/schemas/City'
            text/json:
              schema:
                $ref: '#/components/schemas/City'
        '404':
          description: If no resource was found
      security:
        - bearer: []
  /api/v1/Helper/gender:
    post:
      tags:
        - Helper
      summary: Gets list of genders
      parameters:
        - name: culture
          in: header
          description: Culture of user
          schema:
            type: string
            description: Culture of user
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gender'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gender'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gender'
      security:
        - bearer: []
  /api/v1/Helper/culture:
    post:
      tags:
        - Helper
      summary: Gets list of cultures
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Culture'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Culture'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Culture'
      security:
        - bearer: []
  /api/v1/Helper/search:
    post:
      tags:
        - Helper
      summary: Searches resources by query
      requestBody:
        description: Query to search(by name)
        content:
          application/json-patch+json:
            schema:
              type: string
              description: Query to search(by name)
          application/json:
            schema:
              type: string
              description: Query to search(by name)
          text/json:
            schema:
              type: string
              description: Query to search(by name)
          application/*+json:
            schema:
              type: string
              description: Query to search(by name)
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Biomarker'
      security:
        - bearer: []
  /api/v1/Lab/search:
    post:
      tags:
        - Lab
      summary: Searches labs by query
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Query to search(by name)
        content:
          application/json-patch+json:
            schema:
              type: string
              description: Query to search(by name)
          application/json:
            schema:
              type: string
              description: Query to search(by name)
          text/json:
            schema:
              type: string
              description: Query to search(by name)
          application/*+json:
            schema:
              type: string
              description: Query to search(by name)
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
      security:
        - bearer: []
  /api/v1/Lab:
    get:
      tags:
        - Lab
      summary: Gets paged resources of type
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
      security:
        - bearer: []
    post:
      tags:
        - Lab
      summary: Gets paged resources of type of given ids
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Ids of resources to get
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lab'
      security:
        - bearer: []
  '/api/v1/Lab/{id}':
    get:
      tags:
        - Lab
      summary: Gets resource of type of given id
      parameters:
        - name: id
          in: path
          description: Number of page to get(starts from 1)
          required: true
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Lab'
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'
            text/json:
              schema:
                $ref: '#/components/schemas/Lab'
        '404':
          description: If no resource was found
      security:
        - bearer: []
  /api/v1/Member:
    post:
      tags:
        - Member
      summary: Adds new member to user
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberModel'
      responses:
        '200':
          description: If member was added
        '400':
          description: If anything went BAD and member wasn't added
      security:
        - bearer: []
  '/api/v1/Member/{id}':
    delete:
      tags:
        - Member
      summary: Removes member out of user
      parameters:
        - name: id
          in: path
          description: Id of member to remove from user
          required: true
          schema:
            type: integer
            description: Id of member to remove from user
            format: int32
      responses:
        '200':
          description: If member was removed
        '400':
          description: If anything went BAD and member wasn't removed
      security:
        - bearer: []
    patch:
      tags:
        - Member
      summary: Edits data of member
      parameters:
        - name: id
          in: path
          description: Id of member to edit
          required: true
          schema:
            type: integer
            description: Id of member to edit
            format: int32
      requestBody:
        description: Model with new data
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberModel'
      responses:
        '200':
          description: If member was edited
        '400':
          description: If anything went BAD and member wasn't edited
      security:
        - bearer: []
  /api/v1/member/analysis/add:
    post:
      tags:
        - MemberAnalysis
      summary: Adds new analysis
      description: '"Biomarkers" property IS required'
      requestBody:
        description: Model of analysis
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberAnalysisModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberAnalysisModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberAnalysisModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberAnalysisModel'
        required: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        '400':
          description: If anything went BAD
      security:
        - bearer: []
  '/api/v1/member/analysis/{id}':
    patch:
      tags:
        - MemberAnalysis
      summary: Edits analysis of given id
      description: '"Biomarkers" property IS NOT required'
      parameters:
        - name: id
          in: path
          description: Id of analysis
          required: true
          schema:
            type: integer
            description: Id of analysis
            format: int32
      requestBody:
        description: New data
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberAnalysisModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberAnalysisModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberAnalysisModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberAnalysisModel'
        required: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MemberAnalysis'
            application/json:
              schema:
                $ref: '#/components/schemas/MemberAnalysis'
            text/json:
              schema:
                $ref: '#/components/schemas/MemberAnalysis'
        '400':
          description: If anything went BAD
      security:
        - bearer: []
    delete:
      tags:
        - MemberAnalysis
      summary: Deletes analysis of given id
      parameters:
        - name: id
          in: path
          description: Id of analysis
          required: true
          schema:
            type: integer
            description: Id of analysis
            format: int32
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MemberAnalysis'
            application/json:
              schema:
                $ref: '#/components/schemas/MemberAnalysis'
            text/json:
              schema:
                $ref: '#/components/schemas/MemberAnalysis'
        '400':
          description: If anything went BAD
      security:
        - bearer: []
    get:
      tags:
        - MemberAnalysis
      summary: Gets resource of type of given id
      parameters:
        - name: id
          in: path
          description: Number of page to get(starts from 1)
          required: true
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MemberAnalysis'
            application/json:
              schema:
                $ref: '#/components/schemas/MemberAnalysis'
            text/json:
              schema:
                $ref: '#/components/schemas/MemberAnalysis'
        '404':
          description: If no resource was found
      security:
        - bearer: []
  /api/v1/member/analysis:
    get:
      tags:
        - MemberAnalysis
      summary: Gets paged resources of type
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberAnalysis'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberAnalysis'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberAnalysis'
      security:
        - bearer: []
    post:
      tags:
        - MemberAnalysis
      summary: Gets paged resources of type of given ids
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Ids of resources to get
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberAnalysis'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberAnalysis'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberAnalysis'
      security:
        - bearer: []
  /api/v1/member/biomarker/add:
    post:
      tags:
        - MemberBiomarker
      summary: Adds new member biomarker
      requestBody:
        description: Model of biomarker
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberBiomarkerModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberBiomarkerModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberBiomarkerModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberBiomarkerModel'
        required: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
        '400':
          description: If anything went BAD
      security:
        - bearer: []
  '/api/v1/member/biomarker/{id}':
    patch:
      tags:
        - MemberBiomarker
      summary: Edits member's biomarker of given id
      description: '"AnalysisId" is ignored'
      parameters:
        - name: id
          in: path
          description: Id of biomarker
          required: true
          schema:
            type: integer
            description: Id of biomarker
            format: int32
      requestBody:
        description: New data
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MemberBiomarkerModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MemberBiomarkerModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MemberBiomarkerModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MemberBiomarkerModel'
        required: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MemberBiomarker'
            application/json:
              schema:
                $ref: '#/components/schemas/MemberBiomarker'
            text/json:
              schema:
                $ref: '#/components/schemas/MemberBiomarker'
        '400':
          description: If anything went BAD
      security:
        - bearer: []
    delete:
      tags:
        - MemberBiomarker
      summary: Deletes member's biomarker of given id
      parameters:
        - name: id
          in: path
          description: Id of biomarker
          required: true
          schema:
            type: integer
            description: Id of biomarker
            format: int32
      responses:
        '200':
          description: If everything went OK
        '400':
          description: If anything went BAD
      security:
        - bearer: []
    get:
      tags:
        - MemberBiomarker
      summary: Gets resource of type of given id
      parameters:
        - name: id
          in: path
          description: Number of page to get(starts from 1)
          required: true
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MemberBiomarker'
            application/json:
              schema:
                $ref: '#/components/schemas/MemberBiomarker'
            text/json:
              schema:
                $ref: '#/components/schemas/MemberBiomarker'
        '404':
          description: If no resource was found
      security:
        - bearer: []
  /api/v1/member/biomarker:
    get:
      tags:
        - MemberBiomarker
      summary: Gets paged resources of type
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBiomarker'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBiomarker'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBiomarker'
      security:
        - bearer: []
    post:
      tags:
        - MemberBiomarker
      summary: Gets paged resources of type of given ids
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Ids of resources to get
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBiomarker'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBiomarker'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberBiomarker'
      security:
        - bearer: []
  /api/v1/PasswordReset:
    get:
      tags:
        - PasswordReset
      summary: Sends confirmation email to user with given email
      parameters:
        - name: email
          in: query
          description: Email of user that want to reset password
          required: true
          schema:
            type: string
            description: Email of user that want to reset password
      responses:
        '200':
          description: If everything went OK
        '400':
          description: If anything went BAD
      security:
        - bearer: []
    patch:
      tags:
        - PasswordReset
      summary: Resets password of user
      requestBody:
        description: Model contains code and new password
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PasswordResetModel'
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetModel'
          text/json:
            schema:
              $ref: '#/components/schemas/PasswordResetModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PasswordResetModel'
        required: true
      responses:
        '200':
          description: If everything went OK
        '400':
          description: If anything went BAD
      security:
        - bearer: []
  /api/v1/PasswordReset/verify:
    get:
      tags:
        - PasswordReset
      summary: Verifies code for password reset flow
      parameters:
        - name: code
          in: query
          description: ''
          required: true
          schema:
            type: string
            description: ''
      responses:
        '200':
          description: If everything went OK
        '400':
          description: If anything went BAD
      security:
        - bearer: []
  /api/v1/SocialAccount/provider:
    get:
      tags:
        - SocialAccount
      summary: Gets social providers list
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialAccountProvider'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialAccountProvider'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialAccountProvider'
      security:
        - bearer: []
  '/api/v1/SocialAccount/{type}':
    post:
      tags:
        - SocialAccount
      summary: Adds social account to current user
      parameters:
        - name: type
          in: path
          description: Social provider name
          required: true
          schema:
            type: string
            description: Social provider name
            nullable: true
      requestBody:
        description: Model contains token of social provider account
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TokenModel'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenModel'
          text/json:
            schema:
              $ref: '#/components/schemas/TokenModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TokenModel'
        required: true
      responses:
        '200':
          description: If everything went OK
        '400':
          description: If anything went BAD
        '404':
          description: If provider isn't valid
      security:
        - bearer: []
    delete:
      tags:
        - SocialAccount
      summary: Removes social account from current user
      parameters:
        - name: type
          in: path
          description: Social provider name to delete
          required: true
          schema:
            type: string
            description: Social provider name to delete
            nullable: true
      responses:
        '200':
          description: If everything went OK
        '400':
          description: If anything went BAD
        '404':
          description: If provider isn't valid or social account doesn't exist
      security:
        - bearer: []
  /api/v1/Unit/search:
    post:
      tags:
        - Unit
      summary: Searches units by query
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Query to search(by name)
        content:
          application/json-patch+json:
            schema:
              type: string
              description: Query to search(by name)
          application/json:
            schema:
              type: string
              description: Query to search(by name)
          text/json:
            schema:
              type: string
              description: Query to search(by name)
          application/*+json:
            schema:
              type: string
              description: Query to search(by name)
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
      security:
        - bearer: []
  /api/v1/Unit:
    get:
      tags:
        - Unit
      summary: Gets paged resources of type
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
      security:
        - bearer: []
    post:
      tags:
        - Unit
      summary: Gets paged resources of type of given ids
      parameters:
        - name: page
          in: query
          description: Number of page to get(starts from 1)
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
        - name: pageSize
          in: query
          description: Number of objects on one page
          schema:
            type: integer
            description: Number of objects on one page
            format: int32
        - name: orderByDate
          in: query
          description: Order by date(asc|desc)
          schema:
            type: string
            description: Order by date(asc|desc)
            nullable: true
      requestBody:
        description: Ids of resources to get
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
              description: Ids of resources to get
              nullable: true
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
      security:
        - bearer: []
  '/api/v1/Unit/{id}':
    get:
      tags:
        - Unit
      summary: Gets resource of type of given id
      parameters:
        - name: id
          in: path
          description: Number of page to get(starts from 1)
          required: true
          schema:
            type: integer
            description: Number of page to get(starts from 1)
            format: int32
      responses:
        '200':
          description: If everything went OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Unit'
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
            text/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '404':
          description: If no resource was found
      security:
        - bearer: []
  /api/v1/User:
    get:
      tags:
        - User
      summary: Gets user's account info
      responses:
        '200':
          description: If user data successfully returned
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearer: []
    patch:
      tags:
        - User
      summary: Edits user's data
      requestBody:
        description: New user data
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserEditModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UserEditModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserEditModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserEditModel'
      responses:
        '200':
          description: If user data was edited
        '400':
          description: If anything went BAD and user data wasn't edited
      security:
        - bearer: []
  /api/v1/User/email:
    get:
      tags:
        - User
      summary: Sends email with code to confirm email
      responses:
        '200':
          description: If email was sent
        '400':
          description: If anything went BAD
      security:
        - bearer: []
    patch:
      tags:
        - User
      summary: Verifies user's email with given code
      parameters:
        - name: code
          in: query
          description: Confirmation code to verify email
          required: true
          schema:
            type: string
            description: Confirmation code to verify email
      responses:
        '200':
          description: If everything went OK
        '400':
          description: If anything went BAD
      security:
        - bearer: []
components:
  schemas:
    LogInWithCredentialsModel:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      additionalProperties: false
    Culture:
      type: object
      properties:
        id:
          type: integer
          format: int32
        key:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    GenderTranslation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        cultureId:
          type: integer
          format: int32
        culture:
          $ref: '#/components/schemas/Culture'
        name:
          type: string
          nullable: true
        baseEntityId:
          type: integer
          format: int32
        baseEntity:
          $ref: '#/components/schemas/Gender'
      additionalProperties: false
    Gender:
      type: object
      properties:
        id:
          type: integer
          format: int32
        key:
          type: string
          nullable: true
        translations:
          type: array
          items:
            $ref: '#/components/schemas/GenderTranslation'
          nullable: true
        content:
          $ref: '#/components/schemas/GenderTranslation'
      additionalProperties: false
    CityTranslation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        cultureId:
          type: integer
          format: int32
        culture:
          $ref: '#/components/schemas/Culture'
        name:
          type: string
          nullable: true
        baseEntityId:
          type: integer
          format: int32
        baseEntity:
          $ref: '#/components/schemas/City'
      additionalProperties: false
    City:
      type: object
      properties:
        id:
          type: integer
          format: int32
        translations:
          type: array
          items:
            $ref: '#/components/schemas/CityTranslation'
          nullable: true
        content:
          $ref: '#/components/schemas/CityTranslation'
        labs:
          type: array
          items:
            $ref: '#/components/schemas/Lab'
          nullable: true
        labIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          readOnly: true
      additionalProperties: false
    LabTranslation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        cultureId:
          type: integer
          format: int32
        culture:
          $ref: '#/components/schemas/Culture'
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        baseEntityId:
          type: integer
          format: int32
        baseEntity:
          $ref: '#/components/schemas/Lab'
      additionalProperties: false
    Lab:
      type: object
      properties:
        id:
          type: integer
          format: int32
        phoneNumber:
          type: string
          nullable: true
        cityId:
          type: integer
          format: int32
        city:
          $ref: '#/components/schemas/City'
        translations:
          type: array
          items:
            $ref: '#/components/schemas/LabTranslation'
          nullable: true
        content:
          $ref: '#/components/schemas/LabTranslation'
      additionalProperties: false
    UnitTranslation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        cultureId:
          type: integer
          format: int32
        culture:
          $ref: '#/components/schemas/Culture'
        name:
          type: string
          nullable: true
        baseEntityId:
          type: integer
          format: int32
        baseEntity:
          $ref: '#/components/schemas/Unit'
        shorthand:
          type: string
          nullable: true
      additionalProperties: false
    BiomarkerTypeTranslation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        cultureId:
          type: integer
          format: int32
        culture:
          $ref: '#/components/schemas/Culture'
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        baseEntityId:
          type: integer
          format: int32
        baseEntity:
          $ref: '#/components/schemas/BiomarkerType'
      additionalProperties: false
    BiomarkerType:
      type: object
      properties:
        id:
          type: integer
          format: int32
        translations:
          type: array
          items:
            $ref: '#/components/schemas/BiomarkerTypeTranslation'
          nullable: true
        content:
          $ref: '#/components/schemas/BiomarkerTypeTranslation'
        biomarkers:
          type: array
          items:
            $ref: '#/components/schemas/Biomarker'
          nullable: true
        biomarkerIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          readOnly: true
      additionalProperties: false
    BiomarkerTranslation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        cultureId:
          type: integer
          format: int32
        culture:
          $ref: '#/components/schemas/Culture'
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        baseEntityId:
          type: integer
          format: int32
        baseEntity:
          $ref: '#/components/schemas/Biomarker'
      additionalProperties: false
    CategoryTranslation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        cultureId:
          type: integer
          format: int32
        culture:
          $ref: '#/components/schemas/Culture'
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        baseEntityId:
          type: integer
          format: int32
        baseEntity:
          $ref: '#/components/schemas/Category'
      additionalProperties: false
    MemberCategoryState:
      type: object
      properties:
        id:
          type: integer
          format: int32
        state:
          type: number
          format: double
        difference:
          type: number
          format: double
        categoryId:
          type: integer
          format: int32
        category:
          $ref: '#/components/schemas/Category'
        memberId:
          type: integer
          format: int32
        member:
          $ref: '#/components/schemas/Member'
        dateCreatedAt:
          type: string
          format: date-time
      additionalProperties: false
    CategoryBiomarker:
      type: object
      properties:
        categoryId:
          type: integer
          format: int32
        category:
          $ref: '#/components/schemas/Category'
        biomarkerId:
          type: integer
          format: int32
        biomarker:
          $ref: '#/components/schemas/Biomarker'
      additionalProperties: false
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int32
        translations:
          type: array
          items:
            $ref: '#/components/schemas/CategoryTranslation'
          nullable: true
        content:
          $ref: '#/components/schemas/CategoryTranslation'
        state:
          $ref: '#/components/schemas/MemberCategoryState'
        biomarkers:
          type: array
          items:
            $ref: '#/components/schemas/Biomarker'
          nullable: true
          readOnly: true
        biomarkerIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          readOnly: true
        categoryBiomarkers:
          type: array
          items:
            $ref: '#/components/schemas/CategoryBiomarker'
          nullable: true
      additionalProperties: false
    ArticleTranslation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        cultureId:
          type: integer
          format: int32
        culture:
          $ref: '#/components/schemas/Culture'
        name:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
        baseEntityId:
          type: integer
          format: int32
        baseEntity:
          $ref: '#/components/schemas/Article'
      additionalProperties: false
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int32
        translations:
          type: array
          items:
            $ref: '#/components/schemas/ArticleTranslation'
          nullable: true
        content:
          $ref: '#/components/schemas/ArticleTranslation'
      additionalProperties: false
    BiomarkerReferenceConfigRange:
      type: object
      properties:
        id:
          type: integer
          format: int32
        lower:
          type: number
          format: double
        upper:
          type: number
          format: double
      additionalProperties: false
    BiomarkerReferenceConfig:
      type: object
      properties:
        id:
          type: integer
          format: int32
        referenceId:
          type: integer
          format: int32
        reference:
          $ref: '#/components/schemas/BiomarkerReference'
        ageRangeId:
          type: integer
          format: int32
          nullable: true
        ageRange:
          $ref: '#/components/schemas/BiomarkerReferenceConfigRange'
        genderId:
          type: integer
          format: int32
        gender:
          $ref: '#/components/schemas/Gender'
      additionalProperties: false
    BiomarkerReference:
      type: object
      properties:
        id:
          type: integer
          format: int32
        valueA:
          type: number
          format: double
        valueB:
          type: number
          format: double
        unitId:
          type: integer
          format: int32
        unit:
          $ref: '#/components/schemas/Unit'
        biomarkerId:
          type: integer
          format: int32
        biomarker:
          $ref: '#/components/schemas/Biomarker'
        config:
          $ref: '#/components/schemas/BiomarkerReferenceConfig'
      additionalProperties: false
    BiomarkerArticleType:
      type: object
      properties:
        id:
          type: integer
          format: int32
        key:
          type: string
          nullable: true
      additionalProperties: false
    BiomarkerArticle:
      type: object
      properties:
        biomarkerId:
          type: integer
          format: int32
        biomarker:
          $ref: '#/components/schemas/Biomarker'
        articleId:
          type: integer
          format: int32
        article:
          $ref: '#/components/schemas/Article'
        typeId:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/BiomarkerArticleType'
      additionalProperties: false
    BiomarkerUnit:
      type: object
      properties:
        biomarkerId:
          type: integer
          format: int32
        biomarker:
          $ref: '#/components/schemas/Biomarker'
        unitId:
          type: integer
          format: int32
        unit:
          $ref: '#/components/schemas/Unit'
      additionalProperties: false
    Biomarker:
      type: object
      properties:
        id:
          type: integer
          format: int32
        typeId:
          type: integer
          format: int32
        type:
          $ref: '#/components/schemas/BiomarkerType'
        translations:
          type: array
          items:
            $ref: '#/components/schemas/BiomarkerTranslation'
          nullable: true
        content:
          $ref: '#/components/schemas/BiomarkerTranslation'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
          nullable: true
          readOnly: true
        categoryIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          readOnly: true
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'
          nullable: true
        units:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
          nullable: true
          readOnly: true
        unitIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          readOnly: true
        references:
          type: array
          items:
            $ref: '#/components/schemas/BiomarkerReference'
          nullable: true
        categoryBiomarkers:
          type: array
          items:
            $ref: '#/components/schemas/CategoryBiomarker'
          nullable: true
        biomarkerArticles:
          type: array
          items:
            $ref: '#/components/schemas/BiomarkerArticle'
          nullable: true
        biomarkerUnits:
          type: array
          items:
            $ref: '#/components/schemas/BiomarkerUnit'
          nullable: true
      additionalProperties: false
    UnitTransfer:
      type: object
      properties:
        id:
          type: integer
          format: int32
        unitAId:
          type: integer
          format: int32
        unitA:
          $ref: '#/components/schemas/Unit'
        unitBId:
          type: integer
          format: int32
        unitB:
          $ref: '#/components/schemas/Unit'
        coefficient:
          type: number
          description: UnitA is UnitB * Coefficient
          format: double
      additionalProperties: false
    Unit:
      type: object
      properties:
        id:
          type: integer
          format: int32
        translations:
          type: array
          items:
            $ref: '#/components/schemas/UnitTranslation'
          nullable: true
        content:
          $ref: '#/components/schemas/UnitTranslation'
        biomarkers:
          type: array
          items:
            $ref: '#/components/schemas/Biomarker'
          nullable: true
          readOnly: true
        transfersToIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          readOnly: true
        transfersFromIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          readOnly: true
        transfersTo:
          type: array
          items:
            $ref: '#/components/schemas/UnitTransfer'
          nullable: true
        transfersFrom:
          type: array
          items:
            $ref: '#/components/schemas/UnitTransfer'
          nullable: true
        biomarkerUnits:
          type: array
          items:
            $ref: '#/components/schemas/BiomarkerUnit'
          nullable: true
      additionalProperties: false
    MemberBiomarker:
      type: object
      properties:
        id:
          type: integer
          format: int32
        value:
          type: number
          format: double
        dateCreatedAt:
          type: string
          format: date-time
        unitId:
          type: integer
          format: int32
        unit:
          $ref: '#/components/schemas/Unit'
        biomarkerId:
          type: integer
          format: int32
        biomarker:
          $ref: '#/components/schemas/Biomarker'
        analysisId:
          type: integer
          format: int32
        analysis:
          $ref: '#/components/schemas/MemberAnalysis'
      additionalProperties: false
    MemberAnalysis:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        memberId:
          type: integer
          format: int32
        member:
          $ref: '#/components/schemas/Member'
        labId:
          type: integer
          format: int32
          nullable: true
        lab:
          $ref: '#/components/schemas/Lab'
        biomarkers:
          type: array
          items:
            $ref: '#/components/schemas/MemberBiomarker'
          nullable: true
        dateCreatedAt:
          type: string
          format: date-time
      additionalProperties: false
    Member:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        dateCreatedAt:
          type: string
          format: date-time
        dateBirthday:
          type: string
          format: date-time
        age:
          type: integer
          format: int32
          readOnly: true
        genderId:
          type: integer
          format: int32
        gender:
          $ref: '#/components/schemas/Gender'
        analyzes:
          type: array
          items:
            $ref: '#/components/schemas/MemberAnalysis'
          nullable: true
        analysisIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          readOnly: true
        categoryStates:
          type: array
          items:
            $ref: '#/components/schemas/MemberCategoryState'
          nullable: true
        userId:
          type: integer
          format: int32
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    SocialAccountProvider:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
      additionalProperties: false
    SocialAccount:
      type: object
      properties:
        id:
          type: integer
          format: int32
        key:
          type: string
          nullable: true
        dateCreatedAt:
          type: string
          format: date-time
        providerId:
          type: integer
          format: int32
        provider:
          $ref: '#/components/schemas/SocialAccountProvider'
        userId:
          type: integer
          format: int32
          nullable: true
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    Types:
      enum:
        - 0
        - 1
      type: integer
      format: int32
    ConfirmationCode:
      type: object
      properties:
        id:
          type: integer
          format: int32
        code:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/Types'
        isConfirmed:
          type: boolean
        helperValue:
          type: string
          nullable: true
        userId:
          type: integer
          format: int32
        user:
          $ref: '#/components/schemas/User'
        dateValidUntil:
          type: string
          format: date-time
      additionalProperties: false
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int32
        key:
          type: string
          nullable: true
      additionalProperties: false
    RefreshToken:
      type: object
      properties:
        id:
          type: integer
          format: int32
        token:
          type: string
          nullable: true
        dateExpiration:
          type: string
          format: date-time
        isValid:
          type: boolean
          readOnly: true
        userId:
          type: integer
          format: int32
        user:
          $ref: '#/components/schemas/User'
      additionalProperties: false
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
          format: email
          nullable: true
        emailIsVerified:
          type: boolean
          readOnly: true
        password:
          type: string
          nullable: true
        dateCreatedAt:
          type: string
          format: date-time
        cultureId:
          type: integer
          format: int32
          nullable: true
        culture:
          $ref: '#/components/schemas/Culture'
        members:
          type: array
          items:
            $ref: '#/components/schemas/Member'
          nullable: true
        analyzes:
          type: array
          items:
            $ref: '#/components/schemas/MemberAnalysis'
          nullable: true
        currentMemberId:
          type: integer
          format: int32
        socialAccounts:
          type: array
          items:
            $ref: '#/components/schemas/SocialAccount'
          nullable: true
        confirmationCodes:
          type: array
          items:
            $ref: '#/components/schemas/ConfirmationCode'
          nullable: true
        roleId:
          type: integer
          format: int32
        role:
          $ref: '#/components/schemas/Role'
        refreshTokens:
          type: array
          items:
            $ref: '#/components/schemas/RefreshToken'
          nullable: true
      additionalProperties: false
    AuthenticationResult:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        refreshToken:
          $ref: '#/components/schemas/RefreshToken'
        accessToken:
          type: string
          nullable: true
      additionalProperties: false
    SignUpModel:
      required:
        - color
        - dateBirthday
        - email
        - genderId
        - name
        - password
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        genderId:
          type: integer
          format: int32
        dateBirthday:
          type: string
          format: date-time
        password:
          minLength: 6
          type: string
        color:
          type: string
      additionalProperties: false
    RefreshTokenAuthenticationModel:
      required:
        - memberId
        - refreshToken
        - userId
      type: object
      properties:
        refreshToken:
          type: string
        userId:
          type: integer
          description: Id of current user
          format: int32
        memberId:
          type: integer
          description: Id of current member
          format: int32
      additionalProperties: false
    TokenModel:
      required:
        - token
      type: object
      properties:
        token:
          type: string
      additionalProperties: false
    SocialAuthenticationIdentity:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
      additionalProperties: false
    SignUpWithSocialAccountModel:
      required:
        - color
        - dateBirthday
        - email
        - genderId
        - name
        - password
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        genderId:
          type: integer
          format: int32
        dateBirthday:
          type: string
          format: date-time
        password:
          minLength: 6
          type: string
        color:
          type: string
        identity:
          $ref: '#/components/schemas/SocialAuthenticationIdentity'
      additionalProperties: false
    MemberModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        genderId:
          type: integer
          format: int32
        dateBirthday:
          type: string
          format: date-time
        color:
          type: string
          nullable: true
      additionalProperties: false
    MemberBiomarkerModel:
      required:
        - biomarkerId
        - unitId
      type: object
      properties:
        value:
          type: number
          format: double
        analysisId:
          type: integer
          format: int32
        biomarkerId:
          type: integer
          format: int32
        unitId:
          type: integer
          format: int32
      additionalProperties: false
    MemberAnalysisModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        labId:
          type: integer
          format: int32
        date:
          type: string
          format: date-time
        biomarkers:
          type: array
          items:
            $ref: '#/components/schemas/MemberBiomarkerModel'
          nullable: true
      additionalProperties: false
    PasswordResetModel:
      required:
        - code
        - password
      type: object
      properties:
        code:
          type: string
        password:
          type: string
      additionalProperties: false
    UserEditModel:
      type: object
      properties:
        email:
          type: string
          format: email
          nullable: true
      additionalProperties: false
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
